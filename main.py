import math as mt


# функция вычисляющая дискриминант
def discriminant():
    d = (mt.pow(b, 2)) - (4 * a * c)
    return d


# Функция вычисляющая два корня, когда дискриминант больше нуля
def root_x_1_2():
    x_1 = ((-b) + mt.sqrt(discriminant())) / (2 * a)
    x_2 = ((-b) - mt.sqrt(discriminant())) / (2 * a)
    return [x_1, x_2]


# Функция вычисляющая один корень, когда дискриминант равен нулю
def one_root():
    x = - (b / (2 * a))
    return x


print("* Данная программа получает значения A, B и C квадратного уравнения,\n\
вычисляет и выводит результат и решение уравнения.")
EQUALS = 0

# Основной цикл приложения
while True:
    quit_in_program = input("\nНажмите ENTER чтобы продолжить или Q чтобы выйти: ").lower()
    if quit_in_program == 'q':
        break
    else:
        # получаем исходные данные и выводим структуру уравнения
        while True:
            a_str = input("\n* Введите значение для Ax\u00B2: ")
            # Проверка вводимого пользователем значения
            try:
                a = float(a_str)
            except ValueError:
                print("Ошибка. Пожалуйста введите число.")
            else:
                break
        while True:
            b_str = input("* Введите значение для Bx: ")
            # Проверка вводимого пользователем значения
            try:
                b = float(b_str)
            except ValueError:
                print("Ошибка. Пожалуйста введите число.")
            else:
                break
        while True:
            c_str = input("* Введите значение для C: ")
            # Проверка вводимого пользователем значения
            try:
                c = float(c_str)
            except ValueError:
                print("Ошибка. {} - это не число. Пожалуйста введите число.".format(c_str))
            else:
                break
        # Проверка аргумента А. Аргумент не должен быть равен нулю
        if a == 0:
            print("\nОшибка. Аргумент А не должен быть равен нулю")
        # Формирование структуры уравнения
        else:
            square_equalignment = "{:.0f}x\u00B2{:+.0f}x{:+.0f}={:.0f}".format(a, b, c, EQUALS)
            print(f"\n* Общий вид квадратного уравнения: {square_equalignment}")

            # вычисляем дискриминант
            discriminant()
            print("\n* Вычисляем дискриминант по формуле: D = b\u00B2-4ac = {:.0f}-4*{:.0f}*{:.0f} = {:.0f}"
                  .format(mt.pow(b, 2), a, c, discriminant()))

            # Проверяем имеет ли уравнение корни или нет
            # Если дискриминант меньше нуля, то корней нет
            if discriminant() < EQUALS:
                print("\n* Корней нет, поскольку квадрат любого числа не должен быть отрицательным.")
            # Если дискриминант больше нуля, то два корня
            elif discriminant() > EQUALS:
                print("\n* У исходного уравнения два корня, так как дискриминант больше нуля:")
                x_1_1 = root_x_1_2()[0]
                x_2_2 = root_x_1_2()[1]
                print("\n* Вычисляем первый корень: -b+\u221aD / 2a\n Значение переменной Х 1 равняется: {:.2f}"
                      .format(x_1_1))
                print("* Вычисляем второй корень: -b-\u221aD / 2a\n Значение переменной Х 2 равняется: {:.2f}"
                      .format(x_2_2))
                print("\nУравнение решено")
            # Если дискриминант равен нулю, то один корень
            else:
                print("\n* У исходного уравнения один корень, так как дискриминант равен нулю:\n\
                Вычисляем корень по формуле: -(b / 2a)")
                x_one = one_root()
                print("* -({:.0f} / (2 * {:.0f})) Значение переменной Х равняется: {:.2f}".format(b, a, x_one))
                print("\nУравнение решено")
